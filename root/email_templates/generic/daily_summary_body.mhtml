<%args>
$config
$track_schema
$summary_date
$app_prefix
</%args>
% for my $type (@interesting_types) {
<% $type->{label} %>
%   if (defined $sessions{$type->{key}}) {
%     for my $session (@{$sessions{$type->{key}}}) {
%       print $format_session_details->($session);
%     }
%   } else {
[none]
%   }

% }

% if (@sessions_with_term_requests > 0) {
Sessions with outstanding term requests
%   for my $session (@sessions_with_term_requests) {
%     print $format_session_details->($session);
%   }
% } else {

% }

<%init>
use PomCur::Curs::State qw/:all/;
use PomCur::Track;

my $state = PomCur::Curs::State->new(config => $config);

my @interesting_types =
  ({ state => SESSION_CREATED,
     key => "CREATED_NOT_ACCEPTED",
     label => "Sessions created on $summary_date, but not yet accepted",
     submitter_set => 1 },
   { state => SESSION_CREATED,
     key => "CREATED_NO_CURATOR",
     label => "Sessions created on $summary_date with no curator",
     submitter_set => 0 },
   { state => SESSION_ACCEPTED, label => "Sessions accepted on $summary_date" },
   { state => CURATION_IN_PROGRESS,
     label => "Sessions where curation started on $summary_date" },
   { state => NEEDS_APPROVAL,
     label => "Sessions needing approval from $summary_date" },
   { state => APPROVED, label => "Sessions approved on $summary_date" },
   );

map {
  my $type = $_;
  if (!exists $type->{key}) {
    $type->{key} = $type->{state};
  }
} @interesting_types;

my $session_term_suggestions_count_cvterm =
  $track_schema->find_with_type('Cvterm',
                                { name => 'session_term_suggestions_count' });

my %sessions = ();

my @sessions_with_term_requests = ();

my $iter = PomCur::Track::curs_iterator($config, $track_schema);
while (my ($curs, $cursdb) = $iter->()) {
  my ($current_state, $submitter, $gene_count, $datestamp) =
    $state->get_state($cursdb);

  my $pub = $curs->pub();

  my $curs_details = {
    curs_key => $curs->curs_key(),
    datestamp => $datestamp,
    pub_uniquename => $pub->uniquename(),
    pub_title => $pub->title(),
    submitter => $submitter,
  };

  my $suggest_rs = $curs->cursprops({
    type => $session_term_suggestions_count_cvterm->cvterm_id()
  });

  my $suggest_row = $suggest_rs->first();
  if (defined $suggest_row && $suggest_row->value() > 0) {
    push @sessions_with_term_requests, $curs_details;
  }

  next unless $datestamp =~ /^$summary_date($|\s+)/;

  for my $type (@interesting_types) {
    if ($type->{state} eq $current_state) {
      if ($type->{submitter_set}) {
        if (defined $curs_details->{submitter}) {
          push @{$sessions{$type->{key}}}, $curs_details;
        }
      } else {
        if (!defined $curs_details->{submitter}) {
          push @{$sessions{$type->{key}}}, $curs_details;
        }
      }
    }
  }
}

$app_prefix =~ s|/$||;

my $format_session_details = sub {
  my $session = shift;

  my $details = "  $app_prefix/curs/" . $session->{curs_key} . "\n";
  if (defined $session->{submitter}) {
    $details .= '    ' . ($session->{submitter}->{name} // $session->{submitter}->{email_address});
  }
  $details .= '  ' . $session->{pub_uniquename} . "\n" .
    '    "' . $session->{pub_title} . '"' . "\n";

  return $details;
};

</%init>
