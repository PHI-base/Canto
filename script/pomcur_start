#!/usr/bin/env perl

# This script initialises and runs the pomcur server
#
# The first time the script is run, the user will be asked to initialise
# the application with the --initialise flag.
#
# Once initialised, the script needs no arguments as it will read it's
# configuration from the pomcur_deploy.yaml file.

use strict;
use warnings;
use Carp;
use File::Basename;
use Getopt::Long qw(:config pass_through);

BEGIN {
  my $script_name = basename $0;

  if (-f $script_name && -d "../etc") {
    # we're in the scripts directory - go up
    chdir "..";
  }
};

use lib qw(lib);

use PomCur::Config;
use PomCur::Meta::Util;

$ENV{POMCUR_CONFIG_LOCAL_SUFFIX} ||= 'deploy';

my $lc_app_name = lc PomCur::Config::get_application_name();

my $local_suffix = $ENV{POMCUR_CONFIG_LOCAL_SUFFIX};

$ENV{PLACK_ENV} //= $ENV{POMCUR_CONFIG_LOCAL_SUFFIX};

if ($local_suffix eq 'deploy') {
  my $init_dir = undef;

  GetOptions ("initialise=s" => \$init_dir);

  if ($init_dir) {
    my $config = PomCur::Config->new("${lc_app_name}.yaml");
    PomCur::Meta::Util::initialise_app($config, $init_dir);
    print "Initialisation succesful, now run $0 without the initialise flag\n";
    exit(0);
  } else {
    if (!PomCur::Meta::Util::app_initialised($lc_app_name)) {
      die "$0: Error - application not initialised

Run:
  $0 --initialise <some_directory>
to initialise

<some_directory> must be empty\n";
    }
  }
} else {
  # we're testing
}

require Plack::Runner;
require Plack::Middleware::ReverseProxy;
require Plack::Middleware::Debug;
require Plack::Middleware::Expires;
require Plack::Middleware::Static;
require Plack::Middleware::InteractiveDebugger;

require PomCur;

my $app = PomCur->psgi_app;

$app = Plack::Middleware::ReverseProxy->wrap($app);

$app = Plack::Middleware::Static->wrap($app,
                                       path => sub {
                                         s!^/+static/v\d+[\d\w\-]+/!! },
                                       root => 'root/static');

my $type_re = qr!^image/|^application/javascript$|^text/css!;
$app = Plack::Middleware::Expires->wrap($app,
                                        content_type => $type_re,
                                        expires => 'access plus 999 days');

if ($ENV{PLACK_DEBUG} > 1) {
  $app = Plack::Middleware::Debug->wrap($app);
  $app = Plack::Middleware::InteractiveDebugger->wrap($app);
}

my $runner = Plack::Runner->new;

$runner->parse_options(@ARGV);
$runner->run($app);
